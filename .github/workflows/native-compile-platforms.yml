name: <Native> Compile

on:
  pull_request:
    paths:
    - 'templates/**'
    - 'native/**'
    - '.github/workflows/native-compile-platforms.yml'

# github.head_ref is only defined on pull_request events
concurrency:
  group: ${{ github.workflow }}-${{ github.actor }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  compile_android:
    name: "Android"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download external libraries
        shell: bash
        run: |
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos/cocos-engine-external native/external
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
      - uses: actions/setup-java@v3
        id: setup-jdk
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Compile
        env:
          COCOS_ENGINE_DEV: 1
        run: |
          NATIVE_ROOT=$GITHUB_WORKSPACE/native
          ANDORID_NDK=$ANDROID_NDK_LATEST_HOME
          NATIVE_DIR=$GITHUB_WORKSPACE/templates/android-template
          echo "Compiling Android ... "
          cd $GITHUB_WORKSPACE/templates/
          echo "message(STATUS \"hook before \${CC_TARGET_NAME}\")" >> android/template/Pre-Sample.cmake
          echo "message(STATUS \"hook after \${CC_TARGET_NAME}\")" >> android/template/Post-Sample.cmake
          if [ ! -d  android-template ]; then
            cp -r android/template android-template
          fi
          cd $GITHUB_WORKSPACE/templates/android/build
          mkdir -p build-android/proj
          touch build-android/proj/cfg.cmake
          echo "set(CC_USE_GLES3 ON)" >> build-android/proj/cfg.cmake
          echo "set(CC_USE_VULKAN ON)" >> build-android/proj/cfg.cmake
          echo "set(CC_USE_GLES2 ON)" >> build-android/proj/cfg.cmake
          echo "set(USE_WEBSOCKET_SERVER ON)" >> build-android/proj/cfg.cmake
          echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-android/proj/cfg.cmake
          echo "set(COCOS_X_PATH $NATIVE_ROOT)" >> build-android/proj/cfg.cmake
          echo "set(CC_EXECUTABLE_NAME \"\")" >> build-android/proj/cfg.cmake

          mkdir -p build-android/proj/res/values
          cat << EOF > build-android/proj/res/values/strings.xml
          <resources>
              <string name="app_name" translatable="false">CocosGame</string>
          </resources>
          EOF

          mkdir -p build-android/assets

          ASSET_DIR=$GITHUB_WORKSPACE/templates/android/build/build-android/

          sed -i "s@^PROP_NDK_PATH.*@PROP_NDK_PATH=$ANDORID_NDK@g" gradle.properties
          sed -i "s@^APPLICATION_ID.*@APPLICATION_ID=com.cocos.android@g" gradle.properties
          sed -i "s@^RES_PATH.*@RES_PATH=$ASSET_DIR@g" gradle.properties
          sed -i "s@^COCOS_ENGINE_PATH.*@COCOS_ENGINE_PATH=$NATIVE_ROOT@g" gradle.properties
          sed -i "s@^NATIVE_DIR.*@NATIVE_DIR=$NATIVE_DIR@g" gradle.properties

          # To speedup CI, compile arm64-v8a only
          # sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=armeabi-v7a:arm64-v8a:x86@g" gradle.properties
          df -h
          sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=arm64-v8a@g" gradle.properties

          echo "Compile Android - cmake ..."
          echo "ANDORID_NDK ${ANDROID_NDK} or ${ANDROID_NDK_HOME}"
          ./gradlew :CocosGame:assembleDebug --quiet
          df -h
          ./gradlew clean
          sed -i "s@^PROP_APP_ABI.*@PROP_APP_ABI=armeabi-v7a@g" gradle.properties
          ./gradlew :CocosGame:assembleDebug --quiet
          df -h
          echo "Compile Android Debug Done!"

  compile_openharmony:
    name: "Openharmony"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download external libraries
        shell: bash
        run: |
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos/cocos-engine-external native/external
      - uses: actions/setup-java@v3
        id: setup-jdk
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Get oh sdk cache directory path
        id: oh-sdk-cache-dir-path
        run: |
          echo "cache dir: "
          echo "dir=$HOME/openharmony" >> $GITHUB_OUTPUT

      - name: Output cache dir
        run: |
          echo "Output cache dir: ${{ steps.oh-sdk-cache-dir-path.outputs.dir }}"

      - name: Cache OH SDK
        id: cache-oh-sdk
        uses: actions/cache@v3
        env:
          cache-name: cache-oh-sdk-2
        with:
          path: ${{ steps.oh-sdk-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Add package.json
        run: |
          echo "{}" > package.json
          echo "{\"name\": \"tests\",\"lockfileVersion\": 3,\"requires\": true,\"packages\": {}}" > package-lock.json
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'

      - if: ${{ steps.cache-oh-sdk.outputs.cache-hit != 'true' }}
        name: No Cache found, install oh sdk
        continue-on-error: false
        run: |
          if [ ! -d "$HOME/openharmony" ]; then
            mkdir -p $HOME/openharmony
            echo "Download commandline-tools-linux.zip ..."
            curl -o commandline-tools-linux.zip "https://contentcenter-vali-drcn.dbankcdn.cn/pvt_2/DeveloperAlliance_package_901_9/b1/v3/E6zhv5UFQ2-inIwNJhTN6Q/commandline-tools-linux-2.0.0.2.zip?HW-CC-KV=V1&HW-CC-Date=20230621T074401Z&HW-CC-Expire=315360000&HW-CC-Sign=621224257B02079B1E76C0A56FDF21483400B1E3556213F88DC79BC9BE7D595D"
            echo "Unzip commandline-tools-linux.zip ..."
            unzip commandline-tools-linux.zip -d $HOME/openharmony > /dev/null
            cd $HOME/openharmony
            ls -l
            cd command-line-tools
            echo "=============== PATCHING sdkmanager/bin/sdkmgr file ==============="
            sed -i "s@-Dfile.encoding=UTF-8@-Dfile.encoding=UTF-8 -Duser.country=CN@g" ./sdkmanager/bin/sdkmgr
            cd bin
            ./sdkmgr list
            echo "=============== INSTALL HOS toolchains:9 ==============="
            ./sdkmgr install toolchains:9 --accept-license > /dev/null
            echo "=============== INSTALL OH SDK ets:9 ==============="
            ./sdkmgr install OpenHarmony/ets:9 --accept-license > /dev/null
            echo "=============== INSTALL OH SDK js:9 ==============="
            ./sdkmgr install OpenHarmony/js:9 --accept-license > /dev/null
            echo "=============== INSTALL OH SDK native:9 ==============="
            ./sdkmgr install OpenHarmony/native:9 --accept-license > /dev/null
            echo "=============== INSTALL OH SDK toolchains:9 ==============="
            ./sdkmgr install OpenHarmony/toolchains:9 --accept-license > /dev/null
            echo "=============== INSTALL OH SDK DONE ==============="
            ./sdkmgr list
          fi

      - name: Compile for Openharmony
        run: |
          which node
          which npm
          which java
          node -v
          npm -v
          java --version
          echo "=============== list files in oh sdk ($HOME/openharmony) ==============="
          pushd $HOME/openharmony
          ls -l
          popd

          NATIVE_ROOT=$GITHUB_WORKSPACE/native
          echo "Compiling Openharmony ... "

          cd $GITHUB_WORKSPACE/templates/openharmony

          echo "message(STATUS \"hook before \${CC_TARGET_NAME}\")" >> Pre-Sample.cmake
          echo "message(STATUS \"hook after \${CC_TARGET_NAME}\")" >> Post-Sample.cmake

          mkdir -p build-oh/proj
          touch build-oh/proj/cfg.cmake
          echo "set(CC_USE_GLES3 ON)" >> build-oh/proj/cfg.cmake
          echo "set(CC_USE_VULKAN OFF)" >> build-oh/proj/cfg.cmake
          echo "set(CC_USE_GLES2 ON)" >> build-oh/proj/cfg.cmake
          echo "set(USE_WEBSOCKET_SERVER OFF)" >> build-oh/proj/cfg.cmake
          echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-oh/proj/cfg.cmake
          echo "set(COCOS_X_PATH $NATIVE_ROOT)" >> build-oh/proj/cfg.cmake
          echo "set(CC_EXECUTABLE_NAME \"\")" >> build-oh/proj/cfg.cmake

          echo "=============== cat build-oh/proj/cfg.cmake ==============="
          cat build-oh/proj/cfg.cmake

          mkdir -p build-oh/assets

          ASSET_DIR=$GITHUB_WORKSPACE/templates/openharmony/build-oh

          echo "=============== HACK ./entry/build-profile.json5 ==============="
          sed -i "s@[^-]DRES_DIR[^=]@$ASSET_DIR@g" ./entry/build-profile.json5
          sed -i "s@[^-]DCOMMON_DIR[^=]@$GITHUB_WORKSPACE/templates/common@g" ./entry/build-profile.json5
          # To speedup CI, compile arm64-v8a only
          sed -i "s@\"armeabi-v7a\",@@g" ./entry/build-profile.json5

          echo "entry/build-profile.json5: "
          cat ./entry/build-profile.json5

          echo "=============== HACK ./hvigor/hvigor-wrapper.js ==============="
          sed -i "s@HVIGOR_WRAPPER_PNPM_SCRIPT_PATH,\[\"install\"\]@HVIGOR_WRAPPER_PNPM_SCRIPT_PATH,\[\"install\", \"--lockfile=false\"\]@g" ./hvigor/hvigor-wrapper.js

          echo "=============== SET NPM OH REGISTRY ==============="
          echo "@ohos:registry=https://repo.harmonyos.com/npm/" >> ~/.npmrc
          npm config get @ohos:registry
          npm config get registry

          echo "=============== UPDATE local.properties ==============="
          echo "nodejs.dir=/usr/bin" >> local.properties
          echo "hwsdk.dir=$HOME/openharmony/hwsdk" >> local.properties

          echo "=============== UPDATE ./hvigor/hvigor-config.json5 ==============="
          echo "{\"hvigorVersion\":\"3.0.2\",\"dependencies\":{\"@ohos/hvigor-ohos-plugin\":\"3.0.2\"}}" > ./hvigor/hvigor-config.json5

          echo "=============== Do not import game.ts for cocos_worker.ts ==============="
          sed -i "s@import . launchEngine .@const window = globalThis;//@g" ./entry/src/main/ets/workers/cocos_worker.ts
          sed -i 's@launchEngine().then@/*@g' ./entry/src/main/ets/workers/cocos_worker.ts
          sed -i 's@window.oh.postMessage@*/window.oh.postMessage@g' ./entry/src/main/ets/workers/cocos_worker.ts

          echo "=============== EXECUTE hvigorw ==============="
          ./hvigorw clean -i
          ./hvigorw --stop-daemon -i
          ./hvigorw assembleHap -p debuggable=true --no-daemon -d
          #./hvigorw default@ProcessLibs -p debuggable=true --no-daemon -d
          echo "=============== EXECUTE hvigorw DONE ==============="


